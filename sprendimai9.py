#Дано: список dict-объектов вида вида {"key": "value"}, например
# [{"key1": "value1"}, {"k1": "v1", "k2": "v2", "k3": "v3"}, {}, {},
# {"key1": "value1"}, {"key1": "value1"}, {"key2": "value2"}].

# Напишите функцию, которая удаляет дубликаты из этого списка. Для примера выше возвращаемое
# значение может быть равно [{"key1": "value1"}, {"k1": "v1", "k2": "v2", "k3": "v3"}, {},
# {"key2": "value2"}].
# Обязательное условие: функция не должна иметь сложность O(n^2).


# Можно использовать множество(set), чтобы хранить уникальные элементы,
# а затем преобразовать его обратно в список.
#
# Вот функция, которая решает задачу:

def remove_duplicates(lst):
    seen = set()
    result = []
    for d in lst:
        t = tuple(d.items()) # превращаем словарь в неизменяемый (hashable) объект
        if t not in seen:
            seen.add(t)
            result.append(d)
    return result

# Пример использования

lst = [{"key1": "value1"}, {"k1": "v1", "k2": "v2", "k3": "v3"}, {}, {}, {"key1": "value1"}, {"key1": "value1"},
       {"key2": "value2"}]
print(remove_duplicates(lst))
# должно вывести [{"key1": "value1"}, {"k1": "v1", "k2": "v2", "k3": "v3"}, {}, {"key2": "value2"}]
